[
["index.html", "Sinew: Simple R Package Documentation Preface", " Sinew: Simple R Package Documentation Jonathan Sidi, Metrum Research Group 2018-12-04 Preface Sinew noun | sin·ew | sin-yü A tendon or sinew is a tough band of fibrous connective tissue that usually connects muscle to bone and is capable of withstanding tension. — Wikipedia At the core of creating reproducible research is the daunting process of documentation, and working with R presents no exception. The standardized R package documentation is part of the appeal for new (and experienced) users, where concise, clear instructions are cherished. Packages are great for reusing scripts in a consistent fashion and for developers, package creation helps organizing and maintaining their ideas. The barrier to entry for package maintenance and documentation, however may be too high for R users embarking on the task of package creation, thereby discouraging them from development. The out-of-the-box roxygen2 skeleton supplied by RStudio gives the bare bones road map of what should be part of function documentation. The goal of sinew is to automate nearly all of the manual tasks needed to document functions, properly set up the import fields for oxygenation, and make it easier to attain documentation consistency across functions and packages. Once the initial documentation is set, sinew can be used as part of the natural maintenance workflow to automatically change and append updated parameters, definitions, defaults, add namespacing to functions and dependencies, making your documentation great - again! Sinew is built for both command line and interactive users through a Shiny gadget that can be called from the addin menu. The addin can be used on any function either installed, in the search path, one you just wrote, or one your need to update. "],
["install.html", "Chapter 1 Installation 1.1 CRAN 1.2 Development", " Chapter 1 Installation 1.1 CRAN The CRAN package homepage install.packages(&#39;sinew&#39;) For a quick example, run the following: sinew::makeOxygen(&#39;lm&#39;) 1.2 Development The package is currently under continuous development for the most up to date version run the script below. The github package homepage remotes::install_github(&quot;metrumresearchgroup/sinew&quot;) "],
["motive.html", "Chapter 2 Motivation 2.1 Quick Turnaraound 2.2 Working Example", " Chapter 2 Motivation How can sinew help you? sinew automates tasks that are part of R package documentation and maintance in order to help developers consistently create robust roxygen2 documentation and pass R CMD check --as-cran. 2.1 Quick Turnaraound Two common scenarios arise in package development You start a new project and open a file to develop your idea. Many functions later at the end of the day you look up and you have created a mess of a file. You recieve a mammoth 10,000 line uncommented file to decipher for QC - good luck. Sinew can help turn the around that headache into a CRAN ready package in a few short steps Open a package project in Rstudio. Place the file in the data-raw folder. Run untangle on the large script with the destination directory ../R. This will separate the core functions in the body into single function files (named as the function) and keep the body in body.R Run pretty_namespace to append any missing namespaces in the function scripts. Run makeOxyFile with the path set to R. Run makeImport to create the correct Imports in the DESCRIPTION file and paste it in the the DESCRIPTION file. This should get you far enough to make the impossible problem of understanding what is in that file to a manageable task, with the added benefit of producing a new package ready for distribution. 2.2 Working Example Lets use a reproducible example - The goal is to convert raw script in a file called test.R into a package. The file includes two functions yy and zz and some general script that uses them #some comment yy &lt;- function(a=4){ head(runif(10),a) # a comment } zz &lt;- function(v=10,a=8){ head(runif(v),a) } yy(6) zz(30,3) To start we initialize a R subdirectory and a DESCRIPTION file. dir.create(&#39;R&#39;) devtools::create_description() 2.2.1 Untangling Files One of the first tasks for new developers is to move from long scripts that are intertwined with functions and body code into single function files in a R subdirectory and a clean body script that is easier to read. This task is probably a non-starter if you have more than a few hundered lines of code. This is where untangle can save you time. untangle will separate the long script into single function files in a subdirectory and keep the body script intact. untangle(file = &#39;test.R&#39;,dir.out = &#39;R&#39;) As we can see we got three new files. body.R in the working directory yy.R in the R subdirectory zz.R in the R subdirectory 2.2.2 Namespacing It has become common practice to use the namespace in function calls, and it is obligatory in order to pass a cran check. But, not everyone does it and if you’re not use to it, it’s a pain to go back and update your script. This is where pretty_namespace comes in. This function will go through your script and attach namespaces for you, with the same logic as the search path. pretty_namespace(&#39;R&#39;,overwrite = TRUE) So now we have separate files with functions appropriatly associated with namespaces, and now we can add roxygen2 headers. 2.2.3 Documentation Now we are ready to create the function documentation using roxygen2. We use makeOxygen to create a skeleton for roxygen2 documentation. This function returns a skeleton that includes title, description, return, import and other fields populated with information scraped from the function script. We can also run makeOxygen in batch mode using makeOxyfile. makeOxyFile(&#39;R&#39;,overwrite = TRUE) Lets see what we got back in zz.R: #&#39; @title FUNCTION_TITLE #&#39; @description FUNCTION_DESCRIPTION #&#39; @param v PARAM_DESCRIPTION, Default: 10 #&#39; @param a PARAM_DESCRIPTION, Default: 8 #&#39; @return OUTPUT_DESCRIPTION #&#39; @details DETAILS #&#39; @examples #&#39; \\dontrun{ #&#39; if(interactive()){ #&#39; #EXAMPLE1 #&#39; } #&#39; } #&#39; @seealso #&#39; \\code{\\link[utils]{head}} #&#39; \\code{\\link[stats]{runif}} #&#39; @rdname zz #&#39; @export #&#39; @author Jonathan Sidi #&#39; @importFrom utils head #&#39; @importFrom stats runif zz &lt;- function(v=10,a=8){ utils::head(stats::runif(v),a) } The premise of makeOxygen is to expand on the default skeleton in RStudio, so basic fields are in the output by default. Each field is given with a relevant placeholder giving a hint what is expected. The following is the meat add to these bones: param default values: If a default value is set for a function parameter it will be added to the end @param line. import/importFrom The package scrapes the script with makeImport looking for declared namespaces to create the proper calls for @import and @importFrom which are placed at the bottom of the output. seealso linking to other packages is also taken care of when adding the field @seealso. Any functions that are included in @importFrom will have a link to them by default. 2.2.4 Description It is also important to update the package description file Imports field. This can be done for you with makeImport, by either creating a new Imports field or updating an existing one. makeImport(&#39;R&#39;,format = &#39;description&#39;,desc_loc = &#39;.&#39;) 2.2.5 Update documentation An important part of maintaining a package is keeping the documentation updated. Using moga we can achieve this painlessly. moga runs the same underlying script as makeOxygen but appends new information found into the current roxygen2 header instead of creating a new one. Lets say we updated yy.R to include another param and used another function from the stats package. So the roxygen2 header is now out of synch with the current script. #some comment #&#39; @title FUNCTION_TITLE #&#39; @description FUNCTION_DESCRIPTION #&#39; @param a numeric, set the head to trim from random unif Default: 4 #&#39; @return OUTPUT_DESCRIPTION #&#39; @details DETAILS #&#39; @examples #&#39; \\dontrun{ #&#39; if(interactive()){ #&#39; #EXAMPLE1 #&#39; } #&#39; } #&#39; @seealso #&#39; \\code{\\link[utils]{head}} #&#39; \\code{\\link[stats]{runif}} #&#39; @rdname yy #&#39; @export #&#39; @author Jonathan Sidi #&#39; @importFrom utils head #&#39; @importFrom stats runif yy &lt;- function(a=4,b=2){ x &lt;- utils::head(stats::runif(10*b),a) stats::quantile(x,probs=.95) # a comment } moga(&#39;R/yy.r&#39;,overwrite = TRUE) 2.2.6 Oxygenize and Check 2.2.6.1 Oxygenize devtools::document() Updating test documentation Loading test First time using roxygen2. Upgrading automatically... Updating roxygen version in /Users/jonathans/projects/sinew/Miscellaneous/test/DESCRIPTION Writing NAMESPACE Writing yy.Rd Writing zz.Rd 2.2.6.2 R CMD Check devtools::use_mit_license() * Updating license field in DESCRIPTION. * Creating `LICENSE` from template. devtools::check(cran = TRUE) Updating test documentation Loading test Setting env vars ------------------------------------------------------- CFLAGS : -Wall -pedantic CXXFLAGS: -Wall -pedantic Building test ---------------------------------------------------------- &#39;/Library/Frameworks/R.framework/Resources/bin/R&#39; --no-site-file \\ --no-environ --no-save --no-restore --quiet CMD build \\ &#39;/Users/jonathans/projects/sinew/Miscellaneous/test&#39; \\ --no-resave-data --no-manual * checking for file ‘/Users/jonathans/projects/sinew/Miscellaneous/test/DESCRIPTION’ ... OK * preparing ‘test’: * checking DESCRIPTION meta-information ... OK * checking for LF line-endings in source and make files * checking for empty or unneeded directories * building ‘test_0.0.0.9000.tar.gz’ Setting env vars ------------------------------------------------------- _R_CHECK_CRAN_INCOMING_ : FALSE _R_CHECK_FORCE_SUGGESTS_: FALSE Checking test ---------------------------------------------------------- &#39;/Library/Frameworks/R.framework/Resources/bin/R&#39; --no-site-file \\ --no-environ --no-save --no-restore --quiet CMD check \\ &#39;/var/folders/4_/xhs9__yd49l4v4j4wdg9f0wr0000gp/T//Rtmp1KA1SX/test_0.0.0.9000.tar.gz&#39; \\ --as-cran --timings --no-manual * using log directory ‘/private/var/folders/4_/xhs9__yd49l4v4j4wdg9f0wr0000gp/T/Rtmp1KA1SX/test.Rcheck’ * using R version 3.3.3 (2017-03-06) * using platform: x86_64-apple-darwin13.4.0 (64-bit) * using session charset: UTF-8 * using options ‘--no-manual --as-cran’ * checking for file ‘test/DESCRIPTION’ ... OK * this is package ‘test’ version ‘0.0.0.9000’ * package encoding: UTF-8 * checking package namespace information ... OK * checking package dependencies ... OK * checking if this is a source package ... OK * checking if there is a namespace ... OK * checking for executable files ... OK * checking for hidden files and directories ... OK * checking for portable file names ... OK * checking for sufficient/correct file permissions ... OK * checking whether package ‘test’ can be installed ... OK * checking installed package size ... OK * checking package directory ... OK * checking DESCRIPTION meta-information ... OK * checking top-level files ... OK * checking for left-over files ... OK * checking index information ... OK * checking package subdirectories ... OK * checking R files for non-ASCII characters ... OK * checking R files for syntax errors ... OK * checking whether the package can be loaded ... OK * checking whether the package can be loaded with stated dependencies ... OK * checking whether the package can be unloaded cleanly ... OK * checking whether the namespace can be loaded with stated dependencies ... OK * checking whether the namespace can be unloaded cleanly ... OK * checking loading without being on the library search path ... OK * checking dependencies in R code ... OK * checking S3 generic/method consistency ... OK * checking replacement functions ... OK * checking foreign function calls ... OK * checking R code for possible problems ... OK * checking Rd files ... OK * checking Rd metadata ... OK * checking Rd line widths ... OK * checking Rd cross-references ... OK * checking for missing documentation entries ... OK * checking for code/documentation mismatches ... OK * checking Rd \\usage sections ... OK * checking Rd contents ... OK * checking for unstated dependencies in examples ... OK * checking examples ... OK * DONE Status: OK R CMD check results 0 errors | 0 warnings | 0 notes 2.2.7 Does it work? test::yy() 95% 0.4104221 test::zz() [1] 0.84515305 0.72393508 0.74036634 0.03006037 0.67631049 0.71084114 [7] 0.86142639 0.12371146 "],
["workflow.html", "Chapter 3 Document Workflow", " Chapter 3 Document Workflow The suggested workflow for sinew is an extension of the alternative documentation workflow described in the R packages book by Hadley Wickham. Initial Package Build Create a _sinewconfig.yml file in package/project root folder. Set any persistent definitions such as author name and default fields to be generated for all functions. Develop R script for the package using proper namespacing definitions, i.e. package::function, or use pretty_namespace. Focus only on the function and package logic. Run makeOxygen (single file) or makeOxyFile (directory) to create skeletons. It is suggested to use the styler package beforehand to have ensure proper R script syntax conventions. Fill in the relevant descriptions and examples. Run makeImport to create the correct Imports in the DESCRIPTION file. Build the Package Package Maintenance Update functions as needed Run moga on updated functions Fill in the relevant descriptions and examples. If needed run makeImport to create the correct Imports in the DESCRIPTION file. Build the Package "],
["sinewopts.html", "Chapter 4 Session level options 4.1 Using sinew_opts 4.2 Using _sinewconfig.yml", " Chapter 4 Session level options Sinew options can be set to remain persistent across sessions or at a global level within a session For those familiar with knitr sinew follows the same option logic, and instead of knitr::opts_chunk we define sinew::sinew_opts. The defaults settings for the core function parameters in sinew are defined in sinew_opts. These include the roxygen2 fields and their values to include by default in the function header. These settings will persist for a R session. If the user needs the settings to persist across sessions, like in package development, sinew reads on load a file called _sinewconfig.yml, placed in the working directory. 4.1 Using sinew_opts Retrieve all current values sinew_opts$get() ## $add_fields ## [1] &quot;details&quot; &quot;examples&quot; &quot;seealso&quot; &quot;rdname&quot; &quot;export&quot; ## ## $pretty_print ## [1] TRUE ## ## $author ## [1] &quot;AUTHOR [AUTHOR_2]&quot; ## ## $backref ## [1] &quot;src/filename.cpp&quot; ## ## $concept ## [1] &quot;CONCEPT_TERM_1 [CONCEPT_TERM_2]&quot; ## ## $describeIn ## [1] &quot;FUNCTION_NAME DESCRIPTION&quot; ## ## $details ## [1] &quot;DETAILS&quot; ## ## $example ## [1] &quot;path_to_file/relative/to/packge/root&quot; ## ## $examples ## [1] &quot;\\n#&#39; \\\\dontrun{\\n#&#39; if(interactive()){\\n#&#39; #EXAMPLE1\\n#&#39; }\\n#&#39; }&quot; ## ## $export ## [1] &quot;&quot; ## ## $family ## [1] &quot;FAMILY_TITLE&quot; ## ## $field ## [1] &quot;FIELD_IN_S4_RefClass DESCRIPTION&quot; ## ## $format ## [1] &quot;DATA_STRUCTURE&quot; ## ## $importClassesFrom ## [1] &quot;PKG CLASS_a [CLASS_b]&quot; ## ## $importMethodsFrom ## [1] &quot;PKG METHOD_a [METHOD_b]&quot; ## ## $include ## [1] &quot;FILENAME.R [FILENAME_b.R]&quot; ## ## $inherit ## [1] &quot;[PKG::]SOURCE_FUNCTION [FIELD_a FIELD_b]&quot; ## ## $inheritDotParams ## [1] &quot;[PKG::]SOURCE_FUNCTION&quot; ## ## $inheritSection ## [1] &quot;[PKG::]SOURCE_FUNCTION [SECTION_a SECTION_b]&quot; ## ## $keywords ## [1] &quot;KEYWORD_TERM&quot; ## ## $name ## [1] &quot;NAME&quot; ## ## $rdname ## [1] &quot;FUNCTION_NAME&quot; ## ## $references ## [1] &quot;BIB_CITATION&quot; ## ## $section ## [1] &quot;SECTION_NAME&quot; ## ## $source ## [1] &quot;\\\\url{http://somewhere.important.com/}&quot; ## ## $slot ## [1] &quot;SLOTNAME DESCRIPTION&quot; ## ## $template ## [1] &quot;FILENAME&quot; ## ## $templateVar ## [1] &quot;NAME VALUE&quot; ## ## $useDynLib ## [1] &quot;PKG [ROUTINE_a ROUTINE_b]&quot; Retrieve a specific field sinew_opts$get(&#39;author&#39;) ## [1] &quot;AUTHOR [AUTHOR_2]&quot; Retrieve a multiple fields sinew_opts$get(c(&#39;author&#39;,&#39;source&#39;)) ## $author ## [1] &quot;AUTHOR [AUTHOR_2]&quot; ## ## $source ## [1] &quot;\\\\url{http://somewhere.important.com/}&quot; Set a value sinew_opts$set(list(author=&#39;Jonathan Sidi&#39;)) sinew_opts$get(&#39;author&#39;) ## [1] &quot;Jonathan Sidi&quot; Append a new value to the current field values sinew_opts$get(&#39;add_fields&#39;) ## [1] &quot;details&quot; &quot;examples&quot; &quot;seealso&quot; &quot;rdname&quot; &quot;export&quot; sinew_opts$append(add_fields=&#39;source&#39;) sinew_opts$get(&#39;add_fields&#39;) ## [1] &quot;details&quot; &quot;examples&quot; &quot;seealso&quot; &quot;rdname&quot; &quot;export&quot; &quot;source&quot; Reset fields to package defaults sinew_opts$restore() sinew_opts$get(c(&#39;add_fields&#39;,&#39;author&#39;)) ## $add_fields ## [1] &quot;details&quot; &quot;examples&quot; &quot;seealso&quot; &quot;rdname&quot; &quot;export&quot; ## ## $author ## [1] &quot;AUTHOR [AUTHOR_2]&quot; 4.2 Using _sinewconfig.yml When loading the sinew package the file _sinewconfig.yml will be searched for in the working directory, if found settings found in it will be used instead of the package defaults. To create the _sinewconfig.yml file in the current project directory and update the .Rbuildignore automatically use the function create_yml(). In the example below the field author will be added to all roxygen2 headers returned by sinew and its value is Jonathan Sidi. add_fields: [&quot;author&quot;] author: &#39;Jonathan Sidi&#39; "],
["addins.html", "Chapter 5 Addins 5.1 createOxygen (Static) 5.2 InteractiveOxygen (Interactive)", " Chapter 5 Addins There are two addins in sinew both work off of the same principle. The user highlights a text in the Source editor and sinew will interpret that as the input object of makeOxygen or moga. To access the addins load sinew (library(sinew)) and then two addins are appended to the Addins menu of RStudio. 5.1 createOxygen (Static) This addin will insert above the highlighted text the output of makeOxygen. It is useful to control the fields and their values with sinew_opts. 5.2 InteractiveOxygen (Interactive) This addin invokes a shiny gadget. The user can select to either create a new skeleton or update an existing file. The application search for highlighted text in a number of locations in order to create the documentation. The application has checkboxes to control what fields are in the documentation, and there is a reactive preview tab to see what the documentation looks like as fields are inserted or removed. It is useful to control the fields checked on by default and their values with sinew_opts. Once the user is happy with the documention skeleton it can be inserted into the editor. Creating a new skeleton: Script within the source editor can be in either named tabs (saved files) or unnamed tabs (untitled1) Highlighted text can be functions that are one of following compiled uncompiled attached namespace (package in search path) unattached namespace (package that is installed) Updating existing documentation on disk In this case there has to be a physical location for the application to read. If one can not be found then nothing is displayed in the preview tab. "],
["commandline.html", "Chapter 6 Reference 6.1 makeImport 6.2 makeOxygen 6.3 makeOxyFile 6.4 moga 6.5 rmOxygen 6.6 makeDictionary 6.7 tabular 6.8 untangle 6.9 pretty_namespace", " Chapter 6 Reference Sinew can be used either as a command line tool or with a GUI interface through a Shiny gadget. In this chapter we will describe in detail all the command line functionality. The goal of these functions is to reliably produce CRAN ready documentation and namespace managment that is compatible with roxygen2. But at the end of the day this package is only meant to create a fleshed out skeleton and the actual content is up to the developer. 6.1 makeImport When you are building a package to submit to CRAN and you need to have namespace calls for any function that is being imported. It is a pain to manually parse through the code looking for all the :: and writing it in the roxygen2 header. This function does that for you. You can write normally your script with the namespace calls and in the end run the function and you can paste the output into the header. (or use it as part of makeOxygen or makeOxyFile) The function is written to work on single files or whole directories, like a package R subdirectory. The output can be set to return the format needed for either an roxygen2 header, NAMESPACE or the DESCRIPTION myDir &lt;- &#39;../../R&#39; 6.1.1 DESCRIPTION makeImport(script=myDir,format = &#39;description&#39;) To write the output directly into the Imports field of the DESCRIPTION file, specify path to DESCRIPTION in desc_loc makeImport(myDir,format = &#39;description&#39;, desc_loc=&#39;&lt;PATH TO DESCRIPTION&gt;&#39;) 6.1.2 roxygen2 #single file makeImport(script=file.path(myDir,&#39;makeImport.R&#39;),format = &#39;oxygen&#39;) #whole directory makeImport(script=myDir,format = &#39;oxygen&#39;) 6.1.3 importFrom cutoff Setting the parameter cut to an integer value allows for control of how many functions to list in a package before concatenating the importFrom to an import. This is useful when there are many functions being used throughout the package from the same library and it is practically the same as just importing the whole library #without cut makeImport(script=file.path(myDir,&#39;oxygenAddin.R&#39;),format = &#39;oxygen&#39;) #with cut makeImport(script=file.path(myDir,&#39;oxygenAddin.R&#39;),format = &#39;oxygen&#39;,cut=2) 6.2 makeOxygen Function that returns the skeleton for roxygen2 documentation including title, description, return, import and other fields populated with information scraped from the function script. 6.2.1 Basic Usage makeOxygen is the main function in the package. Running the default setting returns a skeleton with minimal required fields to run devtools::check(build_args = '--as-cran'): title, description, and param. Adding Some Meat to the Bones… The added value of sinew is that it scrapes the script and fills in many important holes in the documentation: param default values: if a default value is set for a function parameter it will be added to the end @param line. import/importFrom It is assumed that the developer is abiding by the CRAN rules and uses the proper namespace syntax package::function when calling functions in the script. The package scrapes the script with makeImport to create the proper calls for @import and @importFrom which are placed at the bottom of the output. The user has control the number of functions that are listed in importFrom package function1 [ function2 …] until only @import package is returned (more below). seealso linking to other packages is also taken care of when adding the field @seealso. Any functions that are included in @importFrom will have a link to them by default. Examples showing different parameter specification in makeOxygen 6.2.2 Simple call makeOxygen(lm) ## #&#39; @title FUNCTION_TITLE ## #&#39; @description FUNCTION_DESCRIPTION ## #&#39; @param formula PARAM_DESCRIPTION ## #&#39; @param data PARAM_DESCRIPTION ## #&#39; @param subset PARAM_DESCRIPTION ## #&#39; @param weights PARAM_DESCRIPTION ## #&#39; @param na.action PARAM_DESCRIPTION ## #&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39; ## #&#39; @param model PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param x PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param y PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param qr PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL ## #&#39; @param offset PARAM_DESCRIPTION ## #&#39; @param ... PARAM_DESCRIPTION ## #&#39; @return OUTPUT_DESCRIPTION ## #&#39; @details DETAILS ## #&#39; @examples ## #&#39; \\dontrun{ ## #&#39; if(interactive()){ ## #&#39; #EXAMPLE1 ## #&#39; } ## #&#39; } ## #&#39; @rdname lm ## #&#39; @export 6.2.3 Add_fields Control over which roxygen2 fields are added to the header is passed through add_fields. makeOxygen(lm, add_fields = c(&#39;author&#39;)) ## #&#39; @title FUNCTION_TITLE ## #&#39; @description FUNCTION_DESCRIPTION ## #&#39; @param formula PARAM_DESCRIPTION ## #&#39; @param data PARAM_DESCRIPTION ## #&#39; @param subset PARAM_DESCRIPTION ## #&#39; @param weights PARAM_DESCRIPTION ## #&#39; @param na.action PARAM_DESCRIPTION ## #&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39; ## #&#39; @param model PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param x PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param y PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param qr PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL ## #&#39; @param offset PARAM_DESCRIPTION ## #&#39; @param ... PARAM_DESCRIPTION ## #&#39; @return OUTPUT_DESCRIPTION ## #&#39; @author AUTHOR [AUTHOR_2] 6.2.4 Cut Passing cut to makeOxygen to return import package instead of importFrom package function1 [function2 ...] for packages that call more than the value assigned to cut. makeOxygen(lm, cut=1) ## #&#39; @title FUNCTION_TITLE ## #&#39; @description FUNCTION_DESCRIPTION ## #&#39; @param formula PARAM_DESCRIPTION ## #&#39; @param data PARAM_DESCRIPTION ## #&#39; @param subset PARAM_DESCRIPTION ## #&#39; @param weights PARAM_DESCRIPTION ## #&#39; @param na.action PARAM_DESCRIPTION ## #&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39; ## #&#39; @param model PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param x PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param y PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param qr PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL ## #&#39; @param offset PARAM_DESCRIPTION ## #&#39; @param ... PARAM_DESCRIPTION ## #&#39; @return OUTPUT_DESCRIPTION ## #&#39; @details DETAILS ## #&#39; @examples ## #&#39; \\dontrun{ ## #&#39; if(interactive()){ ## #&#39; #EXAMPLE1 ## #&#39; } ## #&#39; } ## #&#39; @rdname lm ## #&#39; @export 6.2.5 Seealso When calling addfields('seealso') the function will give a guess of which functions to add conditional on what value cut it set to. That is any function returned with importFrom will also have a seealso link created for it. makeOxygen(lm,add_fields = &#39;seealso&#39;) ## #&#39; @title FUNCTION_TITLE ## #&#39; @description FUNCTION_DESCRIPTION ## #&#39; @param formula PARAM_DESCRIPTION ## #&#39; @param data PARAM_DESCRIPTION ## #&#39; @param subset PARAM_DESCRIPTION ## #&#39; @param weights PARAM_DESCRIPTION ## #&#39; @param na.action PARAM_DESCRIPTION ## #&#39; @param method PARAM_DESCRIPTION, Default: &#39;qr&#39; ## #&#39; @param model PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param x PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param y PARAM_DESCRIPTION, Default: FALSE ## #&#39; @param qr PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param singular.ok PARAM_DESCRIPTION, Default: TRUE ## #&#39; @param contrasts PARAM_DESCRIPTION, Default: NULL ## #&#39; @param offset PARAM_DESCRIPTION ## #&#39; @param ... PARAM_DESCRIPTION ## #&#39; @return OUTPUT_DESCRIPTION 6.3 makeOxyFile Function authored by: Anton Grishin While makeOxygen is the workhorse for the package it does only print out to the console or a object in the current environment. makeOxyFile is a wrapper function for makeOxygen in order to actively insert makeOxygen outputs into existing or new files. By default makeOxyFile will not overwrite existing files, but will make a copy of the file and name it oxy-filename.R. An empty call will envoke the system file selection dialogue. makeOxyFile() Single File makeOxyFile(&quot;./myRfunctions/utils.R&quot;) Batch mode for a directory makeOxyFile(&quot;./myRfunctions&quot;) Additional parameters to makeOxygen can be passed through makeOxyFile(&quot;./myRfunctions/utils.R&quot;, cut = 5) 6.4 moga After initially getting the documentation just right there comes the endless task of package maintanance. Revising functions is a natural part of the workflow, but a collateral effect of updating script is that the documentation needs to be updated too. This can include changes to the parameter inputs (function formals) or switching the internal function dependency from on package to another. This is where moga can help. moga is an acronym for make oxygen great again. moga will rerun cross check the current documentation of an R script and the current script itself and update/add any parameters/defaults/imports discrepancies. This allows the developer to focus on function improvment without having to interrupt the train of thought to focus on documentation. moga can print to console for dry runs or it can overwrite the current file. The example below shows a function that a parameter (a) was added to the formals, and there is a value already in the @return field. readLines(&#39;../moga_test_cli.R&#39;) We see that the new parameter was added belows @param v and the @return field was preserved. moga(path = &#39;../moga_test_cli.R&#39;) If you need to force an existing field to have the default sinew value, then use the force.fields option moga(&#39;../moga_test_cli.R&#39;,force.fields = &#39;return&#39;) 6.5 rmOxygen Function authored by: Anton Grishin Strip roxygen2 preambles from a file rmOxygen(&quot;./myRfunctions/function1.R&quot;) 6.6 makeDictionary This function takes the idea of roxygen2 templates, but repurposes their use. It creates an R file of all the unique roxygen2 parameter fields in a package R subdirectory. This serves a few functions: Creates a general template for regular use with roxygen2 Simple way to check that there are no redundant parameter descriptions and that they are consistent. When present, this is used internally with ls_param to call parameter descriptions in bulk from a centralized template to populate makeOxygen skeletons. For example in the man-roxygen there is a Dictionary-1.R file that was created by makeDictionary. Using ls_param a query is run on the dictionary to return the param fields that intersect with the formals call to the functions. dict_loc &lt;- &#39;https://github.com/metrumresearchgroup/sinew/blob/master/man-roxygen/Dictionary-1.R&#39; #without dictionary makeOxygen(makeImport) #with dictionary makeOxygen(makeImport,use_dictionary = dict_loc) 6.7 tabular Utility function to convert a data.frame to roxygen2 tabular format cat(sinew::tabular(mtcars[1:5, 1:5])) ## #&#39; \\tabular{rrrrr}{ ## #&#39; \\strong{mpg} \\tab \\strong{cyl} \\tab \\strong{disp} \\tab \\strong{hp} \\tab \\strong{drat}\\cr ## #&#39; 21.0 \\tab 6 \\tab 160 \\tab 110 \\tab 3.90\\cr ## #&#39; 21.0 \\tab 6 \\tab 160 \\tab 110 \\tab 3.90\\cr ## #&#39; 22.8 \\tab 4 \\tab 108 \\tab 93 \\tab 3.85\\cr ## #&#39; 21.4 \\tab 6 \\tab 258 \\tab 110 \\tab 3.08\\cr ## #&#39; 18.7 \\tab 8 \\tab 360 \\tab 175 \\tab 3.15 ## #&#39;} cat(sinew::tabular(mtcars[1:5, 1:5],header=FALSE)) ## #&#39; \\tabular{rrrrr}{ ## #&#39; 21.0 \\tab 6 \\tab 160 \\tab 110 \\tab 3.90\\cr ## #&#39; 21.0 \\tab 6 \\tab 160 \\tab 110 \\tab 3.90\\cr ## #&#39; 22.8 \\tab 4 \\tab 108 \\tab 93 \\tab 3.85\\cr ## #&#39; 21.4 \\tab 6 \\tab 258 \\tab 110 \\tab 3.08\\cr ## #&#39; 18.7 \\tab 8 \\tab 360 \\tab 175 \\tab 3.15 ## #&#39;} 6.8 untangle Utility function that splits a R script with multiple functions into multiple single function R files. This is great for when you recieve endlessly long R scripts that you need to organize quickly. untangle can be used in conjunction with makeOxyFile in batch mode to quickly turn around long R files into a CRAN ready package within minutes. txt &lt;- &quot;#some comment #&#39; @import utils yy &lt;- function(a=4){ utils::head(runif(10),a) # a comment } v &lt;- 20 #another comment #&#39; @import utils zz &lt;- function(v=10,a=3){ utils::head(runif(v),pmin(a,v)) } zz(v) &quot; x &lt;- untangle(text = txt) sapply(x,cat,sep=&#39;\\n&#39;) #$yy # #some comment # #&#39; @import utils # yy &lt;- function(a=4){ # utils::head(runif(10),a) # # a comment # } # #$zz # #another comment # #&#39; @import utils # zz &lt;- function(v=10,a=3){ # utils::head(runif(v),pmin(a,v)) # } # #$body #v &lt;- 20 # #zz(v) 6.9 pretty_namespace Autoappend namespace to functions in script by searchpath order. This function will search functions in the following order global environment loadedNamespaces (loaded packages) help.search (installed.packages) online via the sos package (CRAN packages) The sos search is optional and is turned off by default. txt &lt;- &#39;#some comment yy &lt;- function(a=4){ head(runif(10),a) # a comment } zz &lt;- function(v=10,a=8){ head(runif(v),a) }&#39; x &lt;- sinew::pretty_namespace(text=txt) x ## $new_text ## character(0) "]
]
